import { getPostBySlug } from '@/lib/db';
import { notFound } from 'next/navigation';
import Image from 'next/image';
import Link from 'next/link';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import rehypeRaw from 'rehype-raw';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { tomorrow } from 'react-syntax-highlighter/dist/cjs/styles/prism';
import { Metadata } from 'next';
import AutoGeneratedImage from '@/app/components/AutoGeneratedImage';
import { generateExcerpt } from '@/lib/utils';

// 在Next.js 15中，params现在是一个Promise
interface PostPageProps {
  params: Promise<{ slug: string }>;
}

// 动态生成元数据
export async function generateMetadata({ params }: PostPageProps): Promise<Metadata> {
  // 在Next.js 15中，需要先await params
  const resolvedParams = await params;
  const post = await getPostBySlug(resolvedParams.slug);
  
  if (!post) {
    return {
      title: '文章不存在',
      description: '对不起，文章不存在或已被删除。'
    };
  }
  
  // 使用提供的摘要或自动生成
  const postExcerpt = post.excerpt || generateExcerpt(post.content);
  
  return {
    title: post.title,
    description: postExcerpt,
    openGraph: {
      title: post.title,
      description: postExcerpt,
      type: 'article',
      publishedTime: post.published_at,
      modifiedTime: post.updated_at,
      images: post.featured_image ? [post.featured_image] : [],
    },
  };
}

export default async function PostPage({ params }: PostPageProps) {
  // 在Next.js 15中，需要先await params
  const resolvedParams = await params;
  const post = await getPostBySlug(resolvedParams.slug);
  
  if (!post || !post.is_published) {
    notFound();
  }
  
  const publishDate = new Date(post.published_at).toLocaleDateString('zh-CN', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
  
  return (
    <main className="container mx-auto px-4 py-8">
      {/* 返回链接 */}
      <div className="mb-8">
        <Link href="/" className="text-blue-500 hover:underline dark:text-blue-300 flex items-center">
          <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
          </svg>
          返回首页
        </Link>
      </div>
      
      {/* 文章头部 */}
      <header className="mb-8">
        <h1 className="text-3xl md:text-4xl font-bold mb-4 dark:text-white">{post.title}</h1>
        <div className="text-gray-600 dark:text-gray-400 mb-4">发布于 {publishDate}</div>
        
        {/* 暂时屏蔽特色图片
        <div className="relative w-full h-[400px] rounded-lg overflow-hidden mb-8">
          {post.featured_image ? (
            <Image 
              src={post.featured_image} 
              alt={post.title}
              fill
              priority
              style={{ objectFit: 'cover' }}
              sizes="(max-width: 768px) 100vw, (max-width: 1200px) 900px"
            />
          ) : (
            <AutoGeneratedImage
              title={post.title}
              width={900}
              height={400}
              alt={post.title}
            />
          )}
        </div>
        */}
      </header>
      
      {/* 免责声明 */}
      <div className="border-l-4 border-yellow-400 pl-4 mb-8">
        <p className="text-sm italic dark:text-gray-300">
          本文内容由AI生成并经过人工精选，不保证100%准确，请酌情参考使用
        </p>
      </div>
      
      {/* 标签 */}
      {post.tags && post.tags.length > 0 && (
        <div className="flex flex-wrap gap-2 mb-8">
          {post.tags.map((tag: any) => (
            <span key={tag.id} className="bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-3 py-1 rounded-full text-sm">
              {tag.name}
            </span>
          ))}
        </div>
      )}
      
      {/* 文章内容 */}
      <article className="prose prose-lg dark:prose-invert max-w-none">
        <ReactMarkdown 
          remarkPlugins={[remarkGfm]}
          rehypePlugins={[rehypeRaw]}
          components={{
            ol({ node, children, ...props }: any) {
              return (
                <ol className="list-decimal pl-6 my-6 space-y-3" {...props}>
                  {children}
                </ol>
              );
            },
            ul({ node, children, ...props }: any) {
              return (
                <ul className="list-disc pl-6 my-6 space-y-3" {...props}>
                  {children}
                </ul>
              );
            },
            li({ node, children, ...props }: any) {
              // 检查是否含有嵌套的段落，这通常表明是多行列表项
              const hasNestedParagraph = node?.children?.some(
                (child: any) => child.tagName === 'p'
              );
              
              return (
                <li className={`${hasNestedParagraph ? 'mb-2' : ''}`} {...props}>
                  <div className="flex">
                    <div className="flex-1">
                      {children}
                    </div>
                  </div>
                </li>
              );
            },
            p(props: any) {
              const { node, children } = props;
              // 检查父节点是否是列表项
              const isInsideListItem = 
                node?.parent?.type === 'element' && 
                node?.parent?.tagName === 'li';
              
              // 如果是列表项内的段落，调整样式
              if (isInsideListItem) {
                return <p className="my-1">{children}</p>;
              }
              
              return <p className="my-4">{children}</p>;
            },
            table({ node, children, ...props }: any) {
              return (
                <div className="overflow-x-auto my-8">
                  <table className="min-w-full divide-y divide-gray-300 dark:divide-gray-700 border border-gray-300 dark:border-gray-700" {...props}>
                    {children}
                  </table>
                </div>
              );
            },
            thead({ node, children, ...props }: any) {
              return (
                <thead className="bg-gray-50 dark:bg-gray-800" {...props}>
                  {children}
                </thead>
              );
            },
            tbody({ node, children, ...props }: any) {
              return (
                <tbody className="divide-y divide-gray-200 dark:divide-gray-700 bg-white dark:bg-gray-900" {...props}>
                  {children}
                </tbody>
              );
            },
            tr({ node, children, ...props }: any) {
              return (
                <tr className="hover:bg-gray-50 dark:hover:bg-gray-800" {...props}>
                  {children}
                </tr>
              );
            },
            th({ node, children, ...props }: any) {
              return (
                <th className="px-4 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-gray-100" {...props}>
                  {children}
                </th>
              );
            },
            td({ node, children, ...props }: any) {
              return (
                <td className="px-4 py-4 text-sm text-gray-800 dark:text-gray-200" {...props}>
                  {children}
                </td>
              );
            },
            code({ node, inline, className, children, ...props }: any) {
              const match = /language-(\w+)/.exec(className || '');
              return !inline && match ? (
                <SyntaxHighlighter
                  style={tomorrow as any}
                  language={match[1]}
                  PreTag="div"
                  {...props}
                >
                  {String(children).replace(/\n$/, '')}
                </SyntaxHighlighter>
              ) : (
                <code className="px-1.5 py-0.5 rounded bg-gray-100 dark:bg-gray-800 font-mono text-sm" {...props}>
                  {children}
                </code>
              );
            }
          }}
        >
          {post.content}
        </ReactMarkdown>
      </article>
    </main>
  );
} 