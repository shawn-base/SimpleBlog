"use client";

import { useEffect, useState } from 'react';
import Image from 'next/image';
import AutoImageGenerator from './AutoImageGenerator';

interface AutoGeneratedImageProps {
  title: string;
  width: number;
  height: number;
  alt: string;
  className?: string;
}

export default function AutoGeneratedImage({ title, width, height, alt, className = '' }: AutoGeneratedImageProps) {
  const [imageSrc, setImageSrc] = useState<string | null>(null);
  const canvasId = `canvas-${title.replace(/\s+/g, '-').toLowerCase()}`;
  
  useEffect(() => {
    // 一个小延迟，确保画布已经完全渲染
    const timer = setTimeout(() => {
      const canvas = document.getElementById(canvasId) as HTMLCanvasElement;
      if (canvas) {
        try {
          // 将canvas转换为数据URL
          const dataUrl = canvas.toDataURL('image/png');
          setImageSrc(dataUrl);
        } catch (error) {
          console.error('无法将Canvas转换为图片:', error);
        }
      }
    }, 100);
    
    return () => clearTimeout(timer);
  }, [title, canvasId]);
  
  if (!imageSrc) {
    return (
      <div className={`relative w-full h-full ${className}`} style={{ width, height }}>
        <AutoImageGenerator 
          title={title} 
          width={width} 
          height={height} 
          className="hidden"
          id={canvasId}
        />
        <div className="absolute inset-0 flex items-center justify-center bg-gray-200">
          <span className="text-gray-400">生成中...</span>
        </div>
      </div>
    );
  }
  
  return (
    <div className={`relative ${className}`} style={{ width, height }}>
      <Image
        src={imageSrc}
        alt={alt}
        fill
        style={{ objectFit: 'cover' }}
        sizes={`(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw`}
      />
    </div>
  );
} 